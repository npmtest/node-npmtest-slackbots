{"/home/travis/build/npmtest/node-npmtest-slackbots/test.js":"/* istanbul instrument in package npmtest_slackbots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slackbots/lib.npmtest_slackbots.js":"/* istanbul instrument in package npmtest_slackbots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slackbots = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slackbots = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slackbots/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slackbots && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slackbots */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slackbots\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slackbots.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slackbots.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slackbots.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slackbots.__dirname + '/lib.npmtest_slackbots.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slackbots/node_modules/slackbots/index.js":"'use strict';\n\nvar _ = require('lodash');\nvar request = require('request');\nvar Vow = require('vow');\nvar extend = require('extend');\nvar WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\n\nclass Bot extends EventEmitter {\n    /**\n     * @param {object} params\n     * @constructor\n     */\n\n     constructor(params) {\n         super(params);\n         this.token = params.token;\n         this.name = params.name;\n\n         console.assert(params.token, 'token must be defined');\n         this.login();\n     }\n\n    /**\n     * Starts a Real Time Messaging API session\n     */\n     login() {\n         this._api('rtm.start').then((data) => {\n             this.wsUrl = data.url;\n             this.self = data.self;\n             this.team = data.team;\n             this.channels = data.channels;\n             this.users = data.users;\n             this.ims = data.ims;\n             this.groups = data.groups;\n\n             this.emit('start');\n\n             this.connect();\n         }).fail((data) => {\n             this.emit('error', new Error(data.error ? data.error : data));\n         }).done();\n    }\n\n    /**\n     * Establish a WebSocket connection\n     */\n     connect() {\n         this.ws = new WebSocket(this.wsUrl);\n\n         this.ws.on('open', function(data) {\n             this.emit('open', data);\n         }.bind(this));\n\n         this.ws.on('close', function(data) {\n             this.emit('close', data);\n         }.bind(this));\n\n         this.ws.on('message', function(data) {\n             try {\n                 this.emit('message', JSON.parse(data));\n             } catch (e) {\n                 console.log(e);\n             }\n         }.bind(this));\n     }\n\n    /**\n     * Get channels\n     * @returns {vow.Promise}\n     */\n     getChannels() {\n         if (this.channels) {\n             return Vow.fulfill({ channels: this.channels });\n         }\n         return this._api('channels.list');\n      }\n\n    /**\n     * Get users\n     * @returns {vow.Promise}\n     */\n     getUsers() {\n          if (this.users) {\n              return Vow.fulfill({ members: this.users });\n          }\n\n          return this._api('users.list');\n     }\n\n    /**\n     * Get groups\n     * @returns {vow.Promise}\n     */\n    getGroups() {\n        if (this.groups) {\n            return Vow.fulfill({ groups: this.groups });\n        }\n\n        return this._api('groups.list');\n    }\n\n    /**\n     * Get user by name\n     * @param {string} name\n     * @returns {object}\n     */\n    getUser(name) {\n        return this.getUsers().then(function(data) {\n            var res = _.find(data.members, { name: name });\n\n            console.assert(res, 'user not found');\n            return res;\n        });\n    }\n\n    /**\n     * Get channel by name\n     * @param {string} name\n     * @returns {object}\n     */\n    getChannel(name) {\n        return this.getChannels().then(function(data) {\n            var res = _.find(data.channels, { name: name });\n\n            console.assert(res, 'channel not found');\n            return res;\n        });\n    }\n\n    /**\n     * Get group by name\n     * @param {string} name\n     * @returns {object}\n     */\n    getGroup(name) {\n        return this.getGroups().then(function(data) {\n            var res = _.find(data.groups, { name: name });\n\n            console.assert(res, 'group not found');\n            return res;\n        });\n    }\n\n    /**\n     * Get user by id\n     * @param {string} id\n     * @returns {object}\n     */\n    getUserById(id) {\n        return this.getUsers().then(function(data) {\n            var res = _.find(data.members, { id: id });\n\n            console.assert(res, 'user not found');\n            return res;\n        });\n    }\n\n     /**\n      * Get channel by id\n      * @param {string} id\n      * @returns {object}\n      */\n    getChannelById(id) {\n        return this.getChannels().then(function(data) {\n            var res = _.find(data.channels, { id: id });\n\n            console.assert(res, 'channel not found');\n            return res;\n        });\n    }\n\n     /**\n      * Get group by id\n      * @param {string} id\n      * @returns {object}\n     */\n    getGroupById(id) {\n        return this.getGroups().then(function(data) {\n            var res = _.find(data.groups, { id: id });\n\n            console.assert(res, 'group not found');\n            return res;\n        });\n    }\n\n    /**\n     * Get channel ID\n     * @param {string} name\n     * @returns {string}\n     */\n    getChannelId(name) {\n        return this.getChannel(name).then(function(channel) {\n            return channel.id;\n        });\n    }\n\n    /**\n     * Get group ID\n     * @param {string} name\n     * @returns {string}\n     */\n    getGroupId(name) {\n        return this.getGroup(name).then(function(group) {\n            return group.id;\n        });\n    }\n\n    /**\n     * Get user ID\n     * @param {string} name\n     * @returns {string}\n     */\n    getUserId(name) {\n        return this.getUser(name).then(function(user) {\n           return user.id;\n        });\n    }\n\n    /**\n     * Get user by email\n     * @param {string} email\n     * @returns {object}\n     */\n    getUserByEmail(email) {\n        return this.getUsers().then(function(data) {\n            return _.find(data.members, { profile: { email: email } });\n        });\n    }\n\n    /**\n     * Get \"direct message\" channel ID\n     * @param {string} name\n     * @returns {vow.Promise}\n     */\n    getChatId(name) {\n        return this.getUser(name).then(function(data) {\n\n            var chatId = _.find(this.ims, { user: data.id });\n\n            return (chatId && chatId.id) || this.openIm(data.id);\n        }.bind(this)).then(function(data) {\n            return typeof data === 'string' ? data : data.channel.id;\n        });\n    }\n\n    /**\n     * Opens a \"direct message\" channel with another member of your Slack team\n     * @param {string} userId\n     * @returns {vow.Promise}\n     */\n    openIm(userId) {\n        return this._api('im.open', {user: userId});\n    }\n\n    /**\n     * Posts a message to a channel by ID\n     * @param {string} id - channel ID\n     * @param {string} text\n     * @param {object} params\n     * @returns {vow.Promise}\n     */\n    postMessage(id, text, params) {\n        params = extend({\n            text: text,\n            channel: id,\n            username: this.name\n        }, params || {});\n\n        return this._api('chat.postMessage', params);\n    }\n\n     /**\n      * Updates a message by timestamp\n      * @param {string} id - channel ID\n      * @param {string} ts - timestamp\n      * @param {string} text\n      * @param {object} params\n      * @returns {vow.Promise}\n      */\n    updateMessage(id, ts, text, params) {\n        params = extend({\n            ts: ts,\n            channel: id,\n            username: this.name,\n            text: text\n        }, params || {});\n\n        return this._api('chat.update', params);\n    }\n\n    /**\n     * Posts a message to user by name\n     * @param {string} name\n     * @param {string} text\n     * @param {object} params\n     * @param {function} cb\n     * @returns {vow.Promise}\n     */\n    postMessageToUser(name, text, params, cb) {\n        return this._post((params || {}).slackbot ? 'slackbot' : 'user', name, text, params, cb);\n    }\n\n    /**\n     * Posts a message to channel by name\n     * @param {string} name\n     * @param {string} text\n     * @param {object} params\n     * @param {function} cb\n     * @returns {vow.Promise}\n     */\n    postMessageToChannel(name, text, params, cb) {\n        return this._post('channel', name, text, params, cb);\n    }\n\n    /**\n     * Posts a message to group by name\n     * @param {string} name\n     * @param {string} text\n     * @param {object} params\n     * @param {function} cb\n     * @returns {vow.Promise}\n     */\n    postMessageToGroup(name, text, params, cb) {\n        return this._post('group', name, text, params, cb);\n    }\n\n    /**\n     * Common method for posting messages\n     * @param {string} type\n     * @param {string} name\n     * @param {string} text\n     * @param {object} params\n     * @param {function} cb\n     * @returns {vow.Promise}\n     * @private\n     */\n    _post(type, name, text, params, cb) {\n        var method = ({\n            'group': 'getGroupId',\n            'channel': 'getChannelId',\n            'user': 'getChatId',\n            'slackbot': 'getUserId'\n        })[type];\n\n        if (typeof params === 'function') {\n            cb = params;\n            params = null;\n        }\n\n        return this[method](name).then(function(itemId) {\n            return this.postMessage(itemId, text, params);\n        }.bind(this)).always(function(data) {\n            if (cb) {\n                cb(data._value);\n            }\n        });\n    }\n\n    /**\n     * Posts a message to group | channel | user\n     * @param {string} name\n     * @param {string} text\n     * @param {object} params\n     * @param {function} cb\n     * @returns {vow.Promise}\n     */\n    postTo(name, text, params, cb) {\n        return Vow.all([this.getChannels(), this.getUsers(), this.getGroups()]).then(function(data) {\n\n            var all = [].concat(data[0].channels, data[1].members, data[2].groups);\n            var result = _.find(all, {name: name});\n\n            console.assert(result, 'wrong name');\n\n            if (result['is_channel']) {\n                return this.postMessageToChannel(name, text, params, cb);\n            } else if (result['is_group']) {\n                return this.postMessageToGroup(name, text, params, cb);\n            } else {\n                return this.postMessageToUser(name, text, params, cb);\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Preprocessing of params\n     * @param params\n     * @returns {object}\n     * @private\n     */\n    _preprocessParams(params) {\n        params = extend(params || {}, {token: this.token});\n\n        Object.keys(params).forEach(function(name) {\n            var param = params[name];\n\n            if (param && typeof param === 'object') {\n                params[name] = JSON.stringify(param);\n            }\n        });\n\n        return params;\n    }\n\n    /**\n     * Send request to API method\n     * @param {string} methodName\n     * @param {object} params\n     * @returns {vow.Promise}\n     * @private\n     */\n    _api(methodName, params) {\n\n        var data = {\n            url: 'https://slack.com/api/' + methodName,\n            form: this._preprocessParams(params)\n        };\n\n        return new Vow.Promise(function(resolve, reject) {\n\n            request.post(data, function(err, request, body) {\n                if (err) {\n                    reject(err);\n\n                    return false;\n                }\n\n                try {\n                    body = JSON.parse(body);\n\n                    // Response always contain a top-level boolean property ok,\n                    // indicating success or failure\n                    if (body.ok) {\n                        resolve(body);\n                    } else {\n                        reject(body);\n                    }\n\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n}\n\nmodule.exports = Bot;\n"}